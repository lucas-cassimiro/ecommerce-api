generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Decimal
  image       String
  description String
  categoryId  Int      @map("category_id")
  colorId     Int      @map("color_id")
  highlight   Boolean
  discount    Decimal?
  rating      Decimal?
  ean         String   @unique

  updatedAt DateTime @updatedAt @map("updated_at")

  color    Color    @relation(fields: [colorId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  Stock    Stock[]

  @@map("products")
}

enum StockStatus {
  AVAILABLE
  UNAVAILABLE
  RESTOCKING
}

model Stock {
  id            Int         @id @default(autoincrement())
  productId     Int         @unique @map("product_id")
  status        StockStatus
  quantity      Int
  purchasePrice Decimal     @map("purchase_price")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("stocks")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]

  @@map("categories")
}

model Color {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]

  @@map("colors")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  passwordHash String   @map("password_hash")
  cellphone    String
  cpf          String   @unique
  role         Role
  lastLogin    DateTime @map("last_login")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Address {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique @map("user_id")
  street       String
  number       Int
  neighborhood String
  cityId       Int    @map("city_id")
  recipient    String
  cep          String

  @@map("addresses")
}

model City {
  id      Int    @id @default(autoincrement())
  name    String
  stateId Int    @unique @map("state_id")

  state State @relation(fields: [stateId], references: [id])

  @@map("cities")
}

model State {
  id   Int    @id @default(autoincrement())
  name String
  uf   String

  City City[]

  @@map("states")
}
